@startuml

abstract Automaton<S, D>{
- String name;
- HashSet<String> Q;
- InputAlphabet Sigma;
- HashMap<S, D> delta;
- String q0;
- HashSet<String> F;

+ Automaton(StateSet Q);
+ {abstract} boolean isAccept(String inputString);
+ String convert2Tape();
+ String toString();

}

Automaton <|-- DFA
class DFA<Pair<String, Character>, String>{
+ boolean isAccept(String inputString);
}

Automaton <|-- NFA
class NFA<Pair<String, Character>, HashSet<String>>{
+ DFA convert2DFA();
+ boolean isAccept(String inputString);
}

Automaton <|-- PDA
class PDA<Triplet<String, String, Character>, Pair<String, String>>{
+ HashSet<String> Gamma;
+ boolean isAccept(String inputString);
}

Automaton <-- TuringMaschine

class TuringMaschine{
- String name;
- HashSet<String> Q;
- HashSet<String> Sigma;
- HashSet<String> Gamma;
- HashMap<Pair<String, String>, Triplet<String, String, Character>> delta;
- String q0;
- Sttring qAccept;
- String qReject;

+ TuringMaschine(StateSet Q, Alphabet Sigma, Tape Gamma, HashMap delta, State q0, State qAccept, State qReject);
+ void reset();
+ void loadProgram(String program);
+ boolean isAccept(String inputTape);
}

@enduml