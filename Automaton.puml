@startuml

abstract Automaton <S, D> {
- HashSet<String> Q;
- HashSet<Character>  Sigma;
- HashMap<S, D> delta;
- String q0;
- HashSet<String> F;
+ Automaton(StateSet Q);
+ {abstract} boolean isAccept(String inputString);
+ String convert2Tape();
}

Automaton <|-- Deterministic_Finite_Automaton
class Deterministic_Finite_Automaton {
}

Deterministic_Finite_Automaton <|-- Non_Deterministic_Finite_Automaton
class  Non_Deterministic_Finite_Automaton {
+ DFA convert2DFA();
}

Non_Deterministic_Finite_Automaton <|-- Push_Down_Automaton
class Push_Down_Automaton {
+ HashSet<String> Gamma;
}

PDAState --- Push_Down_Automaton

class PDAState {
- String stateName;
- Deque<Character> stack;

+ PDAState(stateName);
+ Triple tripenize(Character ch);
+ PDAState updatePDAState(Pair pair);
}

abstract class Turing_Maschine <D>{
- HashSet<String> Q;
- HashSet<String> Sigma;
- HashSet<String> Gamma;
- HashMap<Pair<String, Character>, D> delta;
- String q0;
- Sttring qAccept;
- String qReject;

+ TuringMaschine(StateSet Q, Alphabet Sigma, Tape Gamma, HashMap delta, State q0, State qAccept, State qReject);
+ void reset();
+ void loadProgram(String program);
+ boolean isAccept(String inputTape);
}

Turing_Maschine <|-- Deterministic_Turing_Maschine

class Deterministic_Turing_Maschine{
}

Deterministic_Turing_Maschine <|-- Non_Deterministic_Turing_Maschine

class Non_Deterministic_Turing_Maschine{
}

Tape --- Turing_Maschine

class Tape{
- ArrayList<Character> tape;
- int headPosition;

+ Tape(ArrayList<Character> tape);
+ Character cha read();
+ void write(Character cha);
+ void move(Character Direction);
}

@enduml