@startuml

InputAlphabet --o Automaton
State --o Automaton
StateSet --o Automaton

abstract Automaton{
- String name
- StateSet Q;
- InputAlphabet Sigma;
- {abstract} HashMap<State, Charactor, <T> delta;
- State q0;
- StateSet F;

+ Automaton(StateSet Q);
+ {abstract} boolean isAccept(String inputString);
+ String toString();

}

class InputAlphabet{
+ HashSet<Character> alphabet;
}

abstract State{
- String name;
- boolean isAccepState;
- boolean isInitState;
- String currentString;

+ State State(String name, boolean isAcceptState, boolean isInitState);
+ State translate(String currentString);
+ String toString();
}


State --o StateSet

class StateSet{
- String name;

+ StateSet(State...states);
+ String toString();

}

Automaton <|-- DFA
class DFA{
- HashMap<State, Character, State> delata;
+ boolean isAccept(String inputString);
}

Automaton <|-- NFA
class NFA{
- HashMap<State, Character, StateSet> delata;
+ boolean isAccept(String inputString);
}

Automaton <|-- PDA
class PDA{
+ boolean isAccept(String inputString);
}

InputAlphabet --o TuringMaschine
State --o TuringMaschine
StateSet --o TuringMaschine
TapeAlphabet --o TuringMaschine

class TuringMaschine{
- name;
- StateSet Q;
- InputAlphabet Sigma;
- TapeAlphabet Gamma;
- HashMap<HashMap<Q, Gamma>, HashMap<Q, Gamma, {L, R}>> delta;
- State q0;
- State qAccept;
- State qReject;

+ TuringMaschine(StateSet Q, Alphabet Sigma, Tape Gamma, HashMap delta, State q0, State qAccept, State qReject);
+ boolean isAccept(Tape inputTape);
}

@enduml